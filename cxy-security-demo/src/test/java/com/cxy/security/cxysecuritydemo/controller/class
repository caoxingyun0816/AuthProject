对于反射需要无参构造函数。

要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.

反射就是把java类中的各种成分映射成一个个的Java对象
需要获取类对应的字节码文件
然后获取到对应的Class对象
Class对象的由来是将class文件读入内存，并为之创建一个Class对象。

当 new Student()时
JVM从本地磁盘中加载Student.class
读入内存中，放在堆内存中
同时创建该类对应的Class对象
该对像包含了Class所有的信息。
同一个类的class对象只会创建一次。
Class 类的实例表示正在运行的 Java 应用程序中的类和接口也就是jvm中有N多的实例每个类都有该Class对象。
Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的defineClass 方法自动构造的。也就是这不需要我们自己去处理创建，JVM已经帮我们创建好了。

1、获取Class对象的三种方式
1.1 Object ——> getClass();
1.2 任何数据类型（包括基本数据类型）都有一个“静态”的class属性
1.3 通过Class类的静态方法：forName（String  className）(常用)

三种方式常用第三种，第一种对象都有了还要反射干什么。
第二种需要导入类的包，依赖太强，不导包就抛编译错误。
一般都第三种，一个字符串可以传入也可写在配置文件中等多种方法。

反射方法的其它使用之---通过反射运行配置文件内容
反射方法的其它使用之---通过反射越过泛型检查
泛型用在编译期，编译过后泛型擦除（消失掉）。所以是可以通过反射越过泛型检查的

import java.lang.reflect.Method;
import java.util.ArrayList;

/*
 * 通过反射越过泛型检查
 *
 * 例如：有一个String泛型的集合，怎样能向这个集合中添加一个Integer类型的值？
 */
public class Demo {
	public static void main(String[] args) throws Exception{
		ArrayList<String> strList = new ArrayList<>();
		strList.add("aaa");
		strList.add("bbb");

	//	strList.add(100);
		//获取ArrayList的Class对象，反向的调用add()方法，添加数据
		Class listClass = strList.getClass(); //得到 strList 对象的字节码 对象
		//获取add()方法
		Method m = listClass.getMethod("add", Object.class);
		//调用add()方法
		m.invoke(strList, 100);

		//遍历集合
		for(Object obj : strList){
			System.out.println(obj);
		}
	}
}
